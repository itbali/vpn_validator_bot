import TelegramBot from 'node-telegram-bot-api';
import { HandlerType } from './handlerType';
import { VPNServer } from '../../models';

export const regenerateKeyHandler: HandlerType = async ({
  msg,
  bot,
  subscriptionService,
  VPNConfig,
  outlineService,
}) => {
  const chatId = msg.chat.id;
  const isPrivate = msg.chat.type === 'private';

  if (!isPrivate) {
    return;
  }

  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  try {
    const isPaidSubscribed = await subscriptionService?.checkPaidSubscription(chatId);
    const isMentoringSubscribed = await subscriptionService?.checkMentorSubscription(chatId);
    const isSubscribed = isPaidSubscribed || isMentoringSubscribed;

    if (!isSubscribed) {
      return bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const currentConfig = await VPNConfig?.findOne({
      where: {
        user_id: chatId.toString(),
        is_active: true,
      },
    });

    if (!currentConfig) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
      return;
    }

    const server = await VPNServer.findByPk(currentConfig.server_id);

    const newConfig = await outlineService?.generateConfig(
      chatId.toString(),
      currentConfig.server_id,
      msg.from?.username || msg.from?.first_name,
    );
    await outlineService?.deactivateConfig(chatId.toString());

    if (!newConfig) {
      await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    let messageText = `<b>üîë –í–∞—à –Ω–æ–≤—ã–π VPN –∫–ª—é—á</b>\n\n`;
    if (server) {
      messageText += `–°–µ—Ä–≤–µ—Ä: ${server.name} (${server.location})\n`;
    }
    messageText += `<code>${newConfig.config_data}</code>\n\n`;
    messageText += `<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.</b>`;

    await bot.sendMessage(chatId, messageText, { parse_mode: 'HTML' as TelegramBot.ParseMode });
  } catch (error) {
    console.error('Error in /regenerate command:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }
};
