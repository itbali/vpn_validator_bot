import TelegramBot from 'node-telegram-bot-api';
import { User, VPNConfig } from '../models';
import { outlineService } from './outlineService';
import { subscriptionService } from './subscriptionService';
import config from '../config';
import { MonitoringService } from './monitoringService';
import { formatBytes } from '../utils/formatters';

export const bot = new TelegramBot(config.bot.token, { polling: true });
const monitoringService = new MonitoringService(bot);

const adminKeyboard: TelegramBot.SendMessageOptions = {
  reply_markup: {
    keyboard: [
      [{ text: 'üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏' }, { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' }],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }]
    ],
    resize_keyboard: true
  }
};

async function isAdmin(chatId: number): Promise<boolean> {
  try {
    const member = await bot.getChatMember(Number(config.telegram.channelId), chatId);
    return ['administrator', 'creator'].includes(member.status);
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  }
}

const mainKeyboard = (isAdmin: boolean): TelegramBot.SendMessageOptions => ({
  reply_markup: {
    keyboard: [
      [{ text: 'üé≠ VPN' }, { text: 'üë®‚Äçüíª –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥' }],
      [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' }],
      ...(isAdmin ? [[{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' }]] : [])
    ],
    resize_keyboard: true
  }
});

const vpnKeyboard: TelegramBot.SendMessageOptions = {
  reply_markup: {
    keyboard: [
      [{ text: 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á' }, { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }],
      [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á' }, { text: 'üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á' }],
      [{ text: '‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' }],
      [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
    ],
    resize_keyboard: true
  }
};

const mentorKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìù –†–∞–∑–±–æ—Ä —Ä–µ–∑—é–º–µ', url: 'https://planerka.app/aleksei-diuzhev/razbor-rezyume' }],
      [{ text: 'üë®‚Äçüíª –í—Å—Ç—Ä–µ—á–∞ —Å —É—á–µ–Ω–∏–∫–æ–º', url: 'https://planerka.app/aleksei-diuzhev/vstrecha-s-uchenikom---1ch' }],
      [{ text: 'üéØ –ú–æ–∫ —Å–æ–±–µ—Å', url: 'https://planerka.app/aleksei-diuzhev/mokovoe-sobesedovanie' }]
    ]
  }
} as TelegramBot.SendMessageOptions;

bot.onText(/\/start/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const username = msg.from?.username;

  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username || '–±–µ–∑ username'} (ID: ${chatId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);

  try {
    const isUserAdmin = await isAdmin(chatId);
    console.log(`üìù –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, {
      username: username,
      isAdmin: isUserAdmin,
      isChatAdmin: isUserAdmin
    });

    const isSubscribed = await subscriptionService.checkUserSubscription(chatId);
    if (!isSubscribed) {
      return bot.sendMessage(
        chatId,
        `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: ${config.telegram.channelUrl}`
      );
    }

    const [user] = await User.findOrCreate({
      where: { telegram_id: chatId.toString() },
      defaults: { 
        username, 
        is_subscribed: true,
        is_admin: isUserAdmin 
      }
    });

    if (!user.is_active) {
      return bot.sendMessage(chatId, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (user.is_admin !== isUserAdmin) {
      await User.update(
        { is_admin: isUserAdmin },
        { where: { telegram_id: chatId.toString() } }
      );
    }

    await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard(isUserAdmin));
  } catch (error) {
    console.error('Error in /start command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const username = msg.from?.username;

  console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username || '–±–µ–∑ username'} (ID: ${chatId}): ${text}`);

  if (!text) return;

  try {
    const isUserAdmin = await isAdmin(chatId);
    const user = await User.findOne({ 
      where: { telegram_id: chatId.toString() }
    });

    if (!user) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    if (!user.is_active || !user.is_subscribed) {
      await bot.sendMessage(chatId, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.');
      return;
    }

    if (isUserAdmin) {
      console.log(`üîë –ó–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ ${username || '–±–µ–∑ username'} (ID: ${chatId})`);
    }

    switch (text) {
      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞':
        if (!isUserAdmin) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        const serverStatus = await monitoringService.getSystemStatus();
        const metrics = await outlineService.getMetrics('all');
        let serverStatsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n`;
        serverStatsMessage += `CPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%\n`;
        serverStatsMessage += `RAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%\n`;
        serverStatsMessage += `–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%\n`;
        serverStatsMessage += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}\n`;
        serverStatsMessage += `–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤\n`;
        await bot.sendMessage(chatId, serverStatsMessage);
        break;

      case 'üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏':
        if (!isUserAdmin) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        const keys = await outlineService.listKeys();
        let keysMessage = `üîë –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π:\n\n`;
        for (const key of keys) {
          const metrics = await outlineService.getMetrics(key.id);
          keysMessage += `ID: ${key.id}\n`;
          keysMessage += `–ò–º—è: ${key.name}\n`;
          keysMessage += `–¢—Ä–∞—Ñ–∏–∫: ${formatBytes(metrics.bytesTransferred)}\n\n`;
        }
        await bot.sendMessage(chatId, keysMessage);
        break;

      case 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏':
        if (!isUserAdmin) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        await bot.sendMessage(chatId, '–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–µ–π...');
        try {
          const result = await outlineService.validateAllKeys();
          let message = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n`;
          message += `üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–ª—é—á–µ–π: ${result.totalChecked}\n`;
          message += `‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: ${result.deactivatedKeys.length}\n\n`;
          
          if (result.deactivatedKeys.length > 0) {
            message += `–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n`;
            for (const key of result.deactivatedKeys) {
              const user = await User.findOne({ where: { telegram_id: key.userId } });
              message += `- ID: ${key.id} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.username || key.userId})\n`;
            }
          }
          
          await bot.sendMessage(chatId, message);
        } catch (error) {
          console.error('Error validating keys:', error);
          await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–π.');
        }
        await bot.sendMessage(chatId, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard(isUserAdmin));
        break;

      case 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        if (!isUserAdmin) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        const users = await User.findAll();
        let usersMessage = `üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n`;
        for (const user of users) {
          const configs = await VPNConfig.findAll({
            where: { user_id: user.telegram_id, is_active: true }
          });
          usersMessage += `ID: ${user.telegram_id}\n`;
          usersMessage += `–ò–º—è: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
          usersMessage += `–°—Ç–∞—Ç—É—Å: ${user.is_active ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ê–¥–º–∏–Ω: ${user.is_admin ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: ${configs.length}\n\n`;
        }
        await bot.sendMessage(chatId, usersMessage);
        await bot.sendMessage(chatId, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard(true));
        break;

      case '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
        if (!isUserAdmin) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        await bot.sendMessage(chatId, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminKeyboard);
        break;

      case 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á':
        const existingConfig = await VPNConfig.findOne({
          where: { 
            user_id: chatId.toString(),
            is_active: true
          }
        });

        if (existingConfig) {
          await bot.sendMessage(
            chatId,
            `<b>üîë –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∫–ª—é—á</b>\n\n` +
            `<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline:</b>\n\n` +
            `<code>${existingConfig.config_data}</code>`,
            { parse_mode: 'HTML' as TelegramBot.ParseMode }
          );
        } else {
          try {
            await outlineService.deactivateConfig(chatId.toString());
            
            const vpnConfig = await outlineService.generateConfig(
              chatId.toString(),
              msg.from?.username || msg.from?.first_name
            );

            await bot.sendMessage(
              chatId,
              `<b>üîë –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
              `<b>üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline VPN –¥–ª—è iOS –∏–ª–∏ Android</b>\n\n` +
              `<b>‚ö°Ô∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n` +
              `<code>${vpnConfig.config_data}</code>`,
              { parse_mode: 'HTML' as TelegramBot.ParseMode }
            );
          } catch (error) {
            console.error('Error in /get_vpn_key:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VPN –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
        }
        break;

      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        const configs = await VPNConfig.findAll({
          where: { user_id: chatId.toString(), is_active: true }
        });

        if (!configs.length) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.');
          return;
        }

        let userStatsMessage = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:\n\n';
        
        for (const config of configs) {
          try {
            const metrics = await outlineService.getMetrics(config.config_id);
            const bytesTotal = metrics.bytesTransferred;
            const bytesInMB = bytesTotal / (1024 * 1024);
            
            userStatsMessage += `ID: ${config.config_id}\n–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n–¢—Ä–∞—Ñ–∏–∫: ${bytesInMB.toFixed(2)} MB\n\n`;
          } catch (error) {
            userStatsMessage += `ID: ${config.config_id}\n–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n–¢—Ä–∞—Ñ–∏–∫: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n`;
          }
        }

        if (user.is_admin) {
          try {
            const serverStatus = await monitoringService.getSystemStatus();
            userStatsMessage += `\n–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\nCPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%\nRAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%\n–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}\n–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤`;
          } catch (error) {
            userStatsMessage += '\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞';
          }
        }

        await bot.sendMessage(chatId, userStatsMessage);
        break;

      case '‚ùì FAQ':
        const faqMessage = `
–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN?
- –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Outline Client: https://getoutline.org/get-started/
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
- –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline Client

2. –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—É—Å"
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline

3. –ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á" (—Å—Ç–∞—Ä—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)

4. –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—É—Å"

5. –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è?
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Outline Client
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏ –∑–∞–Ω–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
`;
        await bot.sendMessage(chatId, faqMessage);
        break;

      case 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á':
        const currentConfig = await VPNConfig.findOne({
          where: { 
            user_id: chatId.toString(),
            is_active: true
          }
        });

        if (!currentConfig) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
          return;
        }

        const newConfig = await outlineService.generateConfig(chatId.toString());
        await outlineService.deactivateConfig(chatId.toString());
        
        await bot.sendMessage(
          chatId,
          `<b>üîë –í–∞—à –Ω–æ–≤—ã–π VPN –∫–ª—é—á</b>\n\n` +
          `<code>${newConfig.config_data}</code>`,
          { parse_mode: 'HTML' as TelegramBot.ParseMode }
        );
        break;

      case 'üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á':
        const configToDelete = await VPNConfig.findOne({
          where: { 
            user_id: chatId.toString(),
            is_active: true
          }
        });

        if (!configToDelete) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
          return;
        }

        await outlineService.deactivateConfig(chatId.toString());
        await bot.sendMessage(chatId, '–í–∞—à VPN –∫–ª—é—á –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
        break;

      case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        if (!user) {
          await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
          return;
        }
        await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard(isUserAdmin));
        break;

      case 'üé≠ VPN':
        await bot.sendMessage(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          vpnKeyboard
        );
        break;

      case 'üë®‚Äçüíª –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥':
        await bot.sendMessage(
          chatId,
          '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n' +
          'üìù <b>–†–∞–∑–±–æ—Ä —Ä–µ–∑—é–º–µ</b> - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ\n' +
          'üë®‚Äçüíª <b>–í—Å—Ç—Ä–µ—á–∞ —Å —É—á–µ–Ω–∏–∫–æ–º</b> - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n' +
          'üéØ <b>–ú–æ–∫ —Å–æ–±–µ—Å</b> - –ü—Ä–æ–±–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
          { 
            parse_mode: 'HTML',
            ...mentorKeyboard
          }
        );
        break;

      case '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.sendMessage(
          chatId,
          '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
          mainKeyboard(isUserAdmin)
        );
        break;

      case 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞':
        await bot.sendMessage(
          chatId,
          '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          mainKeyboard(isUserAdmin)
        );
        break;

      case '‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
        await bot.sendMessage(
          chatId,
          '<b>üì± –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN:</b>\n\n' +
          '1Ô∏è‚É£ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline:</b>\n' +
          '‚Ä¢ iOS: <a href="https://itunes.apple.com/us/app/outline-app/id1356177741">App Store</a>\n' +
          '‚Ä¢ Android: <a href="https://play.google.com/store/apps/details?id=org.outline.android.client">Google Play</a>\n' +
          '‚Ä¢ Windows: <a href="https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe">–°–∫–∞—á–∞—Ç—å</a>\n' +
          '‚Ä¢ macOS: <a href="https://itunes.apple.com/us/app/outline-app/id1356178125">Mac App Store</a>\n' +
          '‚Ä¢ Linux: <a href="https://support.google.com/outline/answer/15331527">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>\n' +
          '‚Ä¢ Chrome: <a href="https://play.google.com/store/apps/details?id=org.outline.android.client">–ü–ª–∞–≥–∏–Ω</a>\n\n' +
          '2Ô∏è‚É£ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>\n' +
          '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á" –≤ –º–µ–Ω—é\n' +
          '‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á\n' +
          '‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline\n' +
          '‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"\n\n' +
          '3Ô∏è‚É£ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n' +
          '‚Ä¢ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á"\n' +
          '‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"\n' +
          '‚Ä¢ –ï—Å–ª–∏ VPN –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"\n\n' +
          '‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –∫–ª—é—á –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
          { 
            parse_mode: 'HTML',
            disable_web_page_preview: true
          }
        );
        break;
    }
  } catch (error) {
    console.error('Error handling menu button:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/help/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const helpMessage = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/mentor - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–µ –∏ —É—Å–ª—É–≥–∞—Ö
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ VPN
/regenerate - –ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å –∫–ª—é—á
/delete - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
/faq - –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ VPN
/support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN
`;
  bot.sendMessage(chatId, helpMessage);
});

bot.onText(/\/mentor/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const mentorInfo = `
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–µ:
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 5+ –ª–µ—Ç
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Node.js, Python, DevOps

–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
1. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
2. –ö–æ–¥-—Ä–µ–≤—å—é
3. –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
4. –ö–∞—Ä—å–µ—Ä–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support
`;
  bot.sendMessage(chatId, mentorInfo);
});

bot.onText(/\/regenerate/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  try {
    const isSubscribed = await subscriptionService.checkUserSubscription(chatId);
    if (!isSubscribed) {
      return bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const currentConfig = await VPNConfig.findOne({
      where: { 
        user_id: chatId.toString(),
        is_active: true
      }
    });

    if (!currentConfig) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
      return;
    }

    const newConfig = await outlineService.generateConfig(chatId.toString());
    await outlineService.deactivateConfig(chatId.toString());
    
    await bot.sendMessage(
      chatId,
      `<b>üîë –í–∞—à –Ω–æ–≤—ã–π VPN –∫–ª—é—á</b>\n\n` +
      `<code>${newConfig.config_data}</code>`,
      { parse_mode: 'HTML' as TelegramBot.ParseMode }
    );
  } catch (error) {
    console.error('Error in /regenerate command:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }
});

bot.onText(/\/delete/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  try {
    const configToDelete = await VPNConfig.findOne({
      where: { 
        user_id: chatId.toString(),
        is_active: true
      }
    });

    if (!configToDelete) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
      return;
    }

    await outlineService.deactivateConfig(chatId.toString());
    await bot.sendMessage(chatId, '–í–∞—à VPN –∫–ª—é—á –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
  } catch (error) {
    console.error('Error in /delete command:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }
});

bot.onText(/\/faq/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const faqMessage = `
–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN?
- –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Outline Client: https://getoutline.org/get-started/
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
- –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline Client

2. –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—É—Å"
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline

3. –ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /regenerate

4. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support

5. –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats
`;
  bot.sendMessage(chatId, faqMessage);
});

bot.onText(/\/support/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const supportMessage = `
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:

1. –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @support_manager
2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: @tech_support
3. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00 –ú–°–ö

–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:
- –í–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
- –í–µ—Ä—Å–∏—é WireGuard
- –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
`;
  bot.sendMessage(chatId, supportMessage);
});

bot.onText(/\/stats/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  try {
    const user = await User.findOne({ where: { telegram_id: chatId.toString() } });
    const configs = await VPNConfig.findAll({
      where: { user_id: chatId.toString(), is_active: true }
    });

    if (!configs.length) {
      return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.');
    }

    let statsMessage = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:\n\n';
    
    for (const config of configs) {
      const metrics = await outlineService.getMetrics(config.config_id);
      const bytesTotal = metrics.bytesTransferred;
      const bytesInMB = bytesTotal / (1024 * 1024);
      
      statsMessage += `ID: ${config.config_id}
–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞
–¢—Ä–∞—Ñ–∏–∫: ${bytesInMB.toFixed(2)} MB\n\n`;
    }

    if (user?.is_admin) {
      const serverStatus = await monitoringService.getSystemStatus();
      statsMessage += `\n–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:
CPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%
RAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%
–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%
–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}
–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤`;
    }

    bot.sendMessage(chatId, statsMessage);
  } catch (error) {
    console.error('Error in /stats command:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

bot.onText(/\/admin/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  try {
    const admin = await isAdmin(chatId);
    if (!admin) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    await bot.sendMessage(chatId, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminKeyboard);
  } catch (error) {
    console.error('Error in /admin command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}); 