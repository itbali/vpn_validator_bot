import TelegramBot from 'node-telegram-bot-api';
import { User, VPNConfig, VPNServer } from '../models';
import { outlineService } from './outlineService';
import { subscriptionService } from './subscriptionService';
import config from '../config';
import { MonitoringService } from './monitoringService';
import { formatBytes } from '../utils/formatters';

interface ServerDialogState {
  step: 'name' | 'location' | 'api_url' | 'cert_sha256';
  data: {
    name?: string;
    location?: string;
    api_url?: string;
    cert_sha256?: string;
  };
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const serverDialogs = new Map<number, ServerDialogState>();

export const bot = new TelegramBot(config.bot.token, { polling: true });
const monitoringService = new MonitoringService(bot);

const adminKeyboard: TelegramBot.SendMessageOptions = {
  reply_markup: {
    keyboard: [
      [{ text: 'üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏' }, { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' }],
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }, { text: 'üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤' }],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }]
    ],
    resize_keyboard: true
  }
};

const isAdmin = async (chatId: number): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (config.telegram.adminIds.includes(chatId)) {
      return true;
    }

    const user = await User.findOne({
      where: { telegram_id: String(chatId) }
    });

    if (!user) {
      return false;
    }

    if (!user.telegram_id || !user.username) {
      return false;
    }

    const channelId = config.telegram.channelId;
    const chatMember = await bot.getChatMember(channelId, chatId);
    return ['creator', 'administrator'].includes(chatMember.status);
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  }
};

const mainKeyboard = async (chatId: number): Promise<TelegramBot.SendMessageOptions> => {
  const isUserAdmin = await isAdmin(chatId);
  const isMentorSubscriber = await subscriptionService.checkMentorSubscription(chatId);
  
  return {
    reply_markup: {
      keyboard: [
        [{ text: 'üé≠ VPN' }, ...(isMentorSubscriber ? [{ text: 'üë®‚Äçüíª –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥' }] : [])],
        [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' }],
        ...(isUserAdmin ? [[{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' }]] : [])
      ],
      resize_keyboard: true
    }
  }
};

const vpnKeyboard: TelegramBot.SendMessageOptions = {
  reply_markup: {
    keyboard: [
      [{ text: 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }],
      [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á' }],
      [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á' }],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }]
    ],
    resize_keyboard: true
  }
};

const mentorKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìù –†–∞–∑–±–æ—Ä —Ä–µ–∑—é–º–µ', url: 'https://planerka.app/aleksei-diuzhev/razbor-rezyume' }],
      [{ text: 'üë®‚Äçüíª –í—Å—Ç—Ä–µ—á–∞ —Å —É—á–µ–Ω–∏–∫–æ–º', url: 'https://planerka.app/aleksei-diuzhev/vstrecha-s-uchenikom---1ch' }],
      [{ text: 'üéØ –ú–æ–∫ —Å–æ–±–µ—Å', url: 'https://planerka.app/aleksei-diuzhev/mokovoe-sobesedovanie' }]
    ]
  }
} as TelegramBot.SendMessageOptions;

const createServerSelectionKeyboard = async (): Promise<TelegramBot.SendMessageOptions> => {
  const servers = await outlineService.getAvailableServers();
  const keyboard = servers.map(server => [{ text: `üåç ${server.name} (${server.location})` }]);
  keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }]);
  
  return {
    reply_markup: {
      keyboard,
      resize_keyboard: true
    }
  };
};

bot.onText(/\/start/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const username = msg.from?.username;

  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username || '–±–µ–∑ username'} (ID: ${chatId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);

  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  try {
    const isUserAdmin = await isAdmin(chatId);
    console.log(`üìù –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, {
      username: username,
      isAdmin: isUserAdmin,
      isChatAdmin: isUserAdmin
    });

    const [user] = await User.findOrCreate({
      where: { telegram_id: String(msg.from.id) },
      defaults: {
        telegram_id: String(msg.from.id),
        username: msg.from.username,
        first_name: msg.from.first_name,
        last_name: msg.from.last_name,
      },
    });

    if (!user.is_subscribed) {
      return bot.sendMessage(
        chatId,
        `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: ${config.telegram.channelUrl}`
      );
    }

    if (!user.is_paid_subscribed) {
      return bot.sendMessage(
        chatId,
        `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: ${config.telegram.paidChannelUrl}
        –ò–ª–∏ –±—ã—Ç—å —É—á–µ–Ω–∏–∫–æ–º –Ω–∞ –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é`
      );
    }

    if (!user.is_active) {
      return bot.sendMessage(chatId, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    if (user.is_admin !== isUserAdmin) {
      await User.update(
        { is_admin: isUserAdmin },
        { where: { telegram_id: chatId.toString() } }
      );
    }

    const keyboard = await mainKeyboard(chatId);
    await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
  } catch (error) {
    console.error('Error in /start command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const isPrivate = msg.chat.type === 'private';
  const username = msg.from?.username;

  if (!text || !isPrivate) {
    return;
  }

  console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username || 'Unknown'} (ID: ${chatId}): ${text} \n`);

  const sendBotMessage = async (message: string, options?: TelegramBot.SendMessageOptions) => {
    console.log(`‚û°Ô∏è –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è ${username || 'Unknown'} (ID: ${chatId}):\n${message}`);
    return bot.sendMessage(chatId, message, options);
  };

  try {
    const user = await User.findOne({ where: { telegram_id: chatId.toString() } });
    const isUserAdmin = await isAdmin(chatId);

    if (isUserAdmin) {
      console.log(`üîë –ó–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ ${username || 'Unknown'} (ID: ${chatId})`);
    }

    if (!user) {
      await sendBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    const isSubscribed = await subscriptionService.checkUserSubscription(chatId);
    
    if (!user.is_active) {
      await sendBotMessage('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return;
    }

    if (!isSubscribed) {
      await sendBotMessage('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã.');
      return;
    }

    switch (text) {
      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        try {
          const serverStatus = await monitoringService.getSystemStatus();
          const metrics = await outlineService.getMetrics('all');
          let serverStatsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n`;
          serverStatsMessage += `CPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%\n`;
          serverStatsMessage += `RAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%\n`;
          serverStatsMessage += `–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%\n`;
          serverStatsMessage += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}\n`;
          serverStatsMessage += `–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤\n`;
          await sendBotMessage(serverStatsMessage);
        } catch (error) {
          console.error('Error getting server stats:', error);
          await sendBotMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        break;

      case 'üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        try {
          const servers = await outlineService.getAvailableServers();
          let keysMessage = `üîë –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π:\n\n`;
          
          if (servers.length === 0) {
            await sendBotMessage('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"');
            return;
          }
          
          for (const server of servers) {
            const keys = await outlineService.listKeys(server.id);
            keysMessage += `üìç –°–µ—Ä–≤–µ—Ä: ${server.name} (${server.location})\n\n`;
            
            if (keys.length === 0) {
              keysMessage += `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π\n\n`;
              continue;
            }
            
            for (const key of keys) {
              try {
                const metrics = await outlineService.getMetrics(key.id);
                keysMessage += `ID: ${key.id}\n`;
                keysMessage += `–ò–º—è: ${key.name}\n`;
                keysMessage += `–¢—Ä–∞—Ñ–∏–∫: ${formatBytes(metrics.dataTransferred.bytes)}\n\n`;
              } catch (error) {
                keysMessage += `ID: ${key.id}\n`;
                keysMessage += `–ò–º—è: ${key.name}\n`;
                keysMessage += `–¢—Ä–∞—Ñ–∏–∫: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n`;
              }
            }
            keysMessage += `\n`;
          }
          
          await sendBotMessage(keysMessage);
        } catch (error) {
          console.error('Error listing keys:', error);
          await sendBotMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π');
        }
        break;

      case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        serverDialogs.set(chatId, {
          step: 'name',
          data: {}
        });
        await sendBotMessage(
          '–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.\n\n' +
          '–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Server 1")\n\n' +
          '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
          {
            reply_markup: {
              keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
              ],
              resize_keyboard: true
            }
          }
        );
        break;

      case '‚ùå –û—Ç–º–µ–Ω–∞':
      case '–æ—Ç–º–µ–Ω–∞':
      case '–û—Ç–º–µ–Ω–∞':
        if (serverDialogs.has(chatId)) {
          serverDialogs.delete(chatId);
          await sendBotMessage('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', adminKeyboard);
        }
        break;

      case 'üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        try {
          const servers = await outlineService.getAvailableServers();
          if (!servers.length) {
            await sendBotMessage('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
            return;
          }

          let message = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n';
          for (const server of servers) {
            message += `ID: ${server.id}\n` +
                      `–ò–º—è: ${server.name}\n` +
                      `–õ–æ–∫–∞—Ü–∏—è: ${server.location}\n` +
                      `API URL: ${server.outline_api_url}\n\n`;
          }

          await sendBotMessage(message);
        } catch (error) {
          console.error('Error listing servers:', error);
          await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
        }
        break;

      case 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        await sendBotMessage('–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–µ–π...');
        try {
          const result = await outlineService.validateAllKeys();
          let message = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n`;
          message += `üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–ª—é—á–µ–π: ${result.totalChecked}\n`;
          message += `‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: ${result.deactivatedKeys.length}\n\n`;
          
          if (result.deactivatedKeys.length > 0) {
            message += `–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n`;
            for (const key of result.deactivatedKeys) {
              const user = await User.findOne({ where: { telegram_id: key.userId } });
              message += `- –ö–æ–Ω—Ñ–∏–≥: ${key.configId} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.username || key.userId})\n`;
            }
          }
          
          await sendBotMessage(message);
        } catch (error) {
          console.error('Error validating keys:', error);
          await sendBotMessage('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–π.');
        }
        await sendBotMessage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', await mainKeyboard(chatId));
        break;

      case 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        const users = await User.findAll();
        let usersMessage = `üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n`;
        for (const user of users) {
          const configs = await VPNConfig.findAll({
            where: { user_id: user.telegram_id, is_active: true }
          });
          usersMessage += `ID: ${user.telegram_id}\n`;
          usersMessage += `–ò–º—è: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
          usersMessage += `–°—Ç–∞—Ç—É—Å: ${user.is_active ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ê–¥–º–∏–Ω: ${user.is_admin ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${user.is_subscribed ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ${user.is_paid_subscribed ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: ${configs.length}\n\n`;
        }
        await sendBotMessage(usersMessage);
        await sendBotMessage('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', await mainKeyboard(chatId));
        break;

      case '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        await sendBotMessage('–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminKeyboard);
        break;

      case 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á':
        const existingConfig = await VPNConfig.findOne({
          where: { 
            user_id: chatId.toString(),
            is_active: true
          }
        });

        if (existingConfig) {
          await sendBotMessage(
            `<b>üîë –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∫–ª—é—á</b>\n\n` +
            `<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline:</b>\n\n` +
            `<code>${existingConfig.config_data}</code>`,
            { parse_mode: 'HTML' as TelegramBot.ParseMode }
          );
        } else {
          const keyboard = await createServerSelectionKeyboard();
          await sendBotMessage(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:',
            keyboard
          );
        }
        break;

      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        const configs = await VPNConfig.findAll({
          where: { user_id: chatId.toString(), is_active: true },
          include: [{
            model: VPNServer,
            required: false
          }]
        });

        if (!configs.length) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.');
          return;
        }

        let userStatsMessage = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:\n\n';
        
        for (const config of configs) {
          try {
            const metrics = await outlineService.getMetrics(config.config_id);
            const server = await VPNServer.findByPk(config.server_id);
            const serverName = server?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä';
            const location = server?.location || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            userStatsMessage += `–°–µ—Ä–≤–µ—Ä: ${serverName} (${location})\n` +
                              `ID: ${config.config_id}\n` +
                              `–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n` +
                              `–¢—Ä–∞—Ñ–∏–∫: ${formatBytes(metrics.dataTransferred.bytes)}\n\n`;
          } catch (error) {
            userStatsMessage += `ID: ${config.config_id}\n` +
                              `–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n` +
                              `–¢—Ä–∞—Ñ–∏–∫: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n`;
          }
        }

        if (user.is_admin) {
          try {
            const serverStatus = await monitoringService.getSystemStatus();
            userStatsMessage += `\n–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n` +
                              `CPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%\n` +
                              `RAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%\n` +
                              `–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%\n` +
                              `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}\n` +
                              `–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤`;
          } catch (error) {
            userStatsMessage += '\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞';
          }
        }

        await sendBotMessage(userStatsMessage);
        break;

      case '‚ùì FAQ':
        const faqMessage = `
–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN?
- –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Outline Client: https://getoutline.org/get-started/
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
- –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline Client

2. –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—É—Å"
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline

3. –ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /regenerate

4. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support

5. –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats
`;
        await sendBotMessage(faqMessage);
        break;

      case 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á':
        const currentConfig = await VPNConfig.findOne({
          where: { 
            user_id: chatId.toString(),
            is_active: true
          }
        });

        if (!currentConfig) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
          return;
        }

        const newConfig = await outlineService.generateConfig(
          chatId.toString(),
          currentConfig.server_id,
          msg.from?.username || msg.from?.first_name
        );
        await outlineService.deactivateConfig(chatId.toString());
        
        await sendBotMessage(
          `<b>üîë –í–∞—à –Ω–æ–≤—ã–π VPN –∫–ª—é—á</b>\n\n` +
          `<code>${newConfig.config_data}</code>`,
          { parse_mode: 'HTML' as TelegramBot.ParseMode }
        );
        break;

      case 'üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á':
        const configToDelete = await VPNConfig.findOne({
          where: { 
            user_id: chatId.toString(),
            is_active: true
          }
        });

        if (!configToDelete) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
          return;
        }

        await outlineService.deactivateConfig(chatId.toString());
        await sendBotMessage('–í–∞—à VPN –∫–ª—é—á –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
        break;

      case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        if (!user) {
          await sendBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
          return;
        }
        await sendBotMessage('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', await mainKeyboard(chatId));
        break;

      case 'üé≠ VPN':
        await sendBotMessage(
          '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          vpnKeyboard
        );
        break;

      case 'üë®‚Äçüíª –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥':
        const isMentorSubscriber = await subscriptionService.checkMentorSubscription(chatId);
        if (!isMentorSubscriber) {
          await sendBotMessage(
            `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: ${config.telegram.channelUrl}`
          );
          return;
        }
        await sendBotMessage(
          '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n' +
          'üìù <b>–†–∞–∑–±–æ—Ä —Ä–µ–∑—é–º–µ</b> - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ\n' +
          'üë®‚Äçüíª <b>–í—Å—Ç—Ä–µ—á–∞ —Å —É—á–µ–Ω–∏–∫–æ–º</b> - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n' +
          'üéØ <b>–ú–æ–∫ —Å–æ–±–µ—Å</b> - –ü—Ä–æ–±–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
          { 
            parse_mode: 'HTML',
            ...mentorKeyboard
          }
        );
        break;

      case '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        const mainMenuKeyboard = await mainKeyboard(chatId);
        await sendBotMessage(
          '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
          mainMenuKeyboard
        );
        break;

      case 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞':
        await sendBotMessage(
          '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          await mainKeyboard(chatId)
        );
        break;

      case '‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
        await sendBotMessage(
          '<b>üì± –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN:</b>\n\n' +
          '1Ô∏è‚É£ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline:</b>\n' +
          '‚Ä¢ iOS: <a href="https://itunes.apple.com/us/app/outline-app/id1356177741">App Store</a>\n' +
          '‚Ä¢ Android: <a href="https://play.google.com/store/apps/details?id=org.outline.android.client">Google Play</a>\n' +
          '‚Ä¢ Windows: <a href="https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe">–°–∫–∞—á–∞—Ç—å</a>\n' +
          '‚Ä¢ macOS: <a href="https://itunes.apple.com/us/app/outline-app/id1356178125">Mac App Store</a>\n' +
          '‚Ä¢ Linux: <a href="https://support.google.com/outline/answer/15331527">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>\n' +
          '‚Ä¢ Chrome: <a href="https://play.google.com/store/apps/details?id=org.outline.android.client">–ü–ª–∞–≥–∏–Ω</a>\n\n' +
          '2Ô∏è‚É£ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>\n' +
          '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á" –≤ –º–µ–Ω—é\n' +
          '‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á\n' +
          '‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline\n' +
          '‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"\n\n' +
          '3Ô∏è‚É£ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n' +
          '‚Ä¢ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á"\n' +
          '‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"\n' +
          '‚Ä¢ –ï—Å–ª–∏ VPN –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"\n\n' +
          '‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –∫–ª—é—á –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
          { 
            parse_mode: 'HTML',
            disable_web_page_preview: true
          }
        );
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
      default:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        const dialogState = serverDialogs.get(chatId);
        if (dialogState) {
          try {
            switch (dialogState.step) {
              case 'name':
                dialogState.data.name = text;
                dialogState.step = 'location';
                await sendBotMessage(
                  '–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Netherlands")\n\n' +
                  '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
                );
                break;

              case 'location':
                dialogState.data.location = text;
                dialogState.step = 'api_url';
                await sendBotMessage(
                  '–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ API URL —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "https://example.com:1234/abc")\n\n' +
                  '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
                );
                break;

              case 'api_url':
                dialogState.data.api_url = text;
                dialogState.step = 'cert_sha256';
                await sendBotMessage(
                  '–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ SHA256 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n' +
                  '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
                );
                break;

              case 'cert_sha256':
                dialogState.data.cert_sha256 = text;
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
                const { name, location, api_url, cert_sha256 } = dialogState.data;
                if (name && location && api_url && cert_sha256) {
                  const server = await outlineService.addServer(name, location, api_url, cert_sha256);
                  await sendBotMessage(
                    `‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
                    `üìç –ù–∞–∑–≤–∞–Ω–∏–µ: ${server.name}\n` +
                    `üåç –õ–æ–∫–∞—Ü–∏—è: ${server.location}\n` +
                    `üî¢ ID: ${server.id}`,
                    adminKeyboard
                  );
                }
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
                serverDialogs.delete(chatId);
                break;
            }
          } catch (error) {
            console.error('Error in server dialog:', error);
            await sendBotMessage(
              '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"',
              adminKeyboard
            );
            serverDialogs.delete(chatId);
          }
          break;
        }

        if (text.startsWith('üåç ')) {
          const serverName = text.slice(2).split(' (')[0].trim();
          const server = await VPNServer.findOne({
            where: {
              name: serverName,
              is_active: true
            }
          });

          if (!server) {
            await sendBotMessage('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
          }

          try {
            await outlineService.deactivateConfig(chatId.toString());
            
            const vpnConfig = await outlineService.generateConfig(
              chatId.toString(),
              server.id,
              msg.from?.username || msg.from?.first_name
            );

            await sendBotMessage(
              `<b>üîë –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
              `<b>üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline VPN –¥–ª—è iOS –∏–ª–∏ Android</b>\n\n` +
              `<b>‚ö°Ô∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n` +
              `<code>${vpnConfig.config_data}</code>`,
              { parse_mode: 'HTML' as TelegramBot.ParseMode }
            );
          } catch (error) {
            console.error('Error generating VPN key:', error);
            await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VPN –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
        }
        break;
    }
  } catch (error) {
    console.error('Error in message handler:', error);
    await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/help/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  const helpMessage = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/mentor - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–µ –∏ —É—Å–ª—É–≥–∞—Ö
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ VPN
/regenerate - –ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å –∫–ª—é—á
/delete - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
/faq - –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ VPN
/support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN
`;
  bot.sendMessage(chatId, helpMessage);
});

bot.onText(/\/mentor/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const mentorInfo = `
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—Ç–æ—Ä–µ:
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 5+ –ª–µ—Ç
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Node.js, Python, DevOps

–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
1. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
2. –ö–æ–¥-—Ä–µ–≤—å—é
3. –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
4. –ö–∞—Ä—å–µ—Ä–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support
`;
  bot.sendMessage(chatId, mentorInfo);
});

bot.onText(/\/regenerate/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  try {
    const isSubscribed = await subscriptionService.checkUserSubscription(chatId);
    if (!isSubscribed) {
      return bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const currentConfig = await VPNConfig.findOne({
      where: { 
        user_id: chatId.toString(),
        is_active: true
      }
    });

    if (!currentConfig) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
      return;
    }

    const newConfig = await outlineService.generateConfig(
      chatId.toString(),
      currentConfig.server_id,
      msg.from?.username || msg.from?.first_name
    );
    await outlineService.deactivateConfig(chatId.toString());
    
    await bot.sendMessage(
      chatId,
      `<b>üîë –í–∞—à –Ω–æ–≤—ã–π VPN –∫–ª—é—á</b>\n\n` +
      `<code>${newConfig.config_data}</code>`,
      { parse_mode: 'HTML' as TelegramBot.ParseMode }
    );
  } catch (error) {
    console.error('Error in /regenerate command:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }
});

bot.onText(/\/delete/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  try {
    const configToDelete = await VPNConfig.findOne({
      where: { 
        user_id: chatId.toString(),
        is_active: true
      }
    });

    if (!configToDelete) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
      return;
    }

    await outlineService.deactivateConfig(chatId.toString());
    await bot.sendMessage(chatId, '–í–∞—à VPN –∫–ª—é—á –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
  } catch (error) {
    console.error('Error in /delete command:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }
});

bot.onText(/\/faq/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const faqMessage = `
–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN?
- –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Outline Client: https://getoutline.org/get-started/
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
- –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline Client

2. –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—É—Å"
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline

3. –ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /regenerate

4. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support

5. –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats
`;
  bot.sendMessage(chatId, faqMessage);
});

bot.onText(/\/support/, (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  const supportMessage = `
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:

1. –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: @support_manager
2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: @tech_support
3. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00 –ú–°–ö

–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:
- –í–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
- –í–µ—Ä—Å–∏—é WireGuard
- –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
`;
  bot.sendMessage(chatId, supportMessage);
});

bot.onText(/\/stats/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  try {
    const user = await User.findOne({ where: { telegram_id: chatId.toString() } });
    const configs = await VPNConfig.findAll({
      where: { user_id: chatId.toString(), is_active: true }
    });

    if (!configs.length) {
      return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.');
    }

    let statsMessage = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:\n\n';
    
    for (const config of configs) {
      const metrics = await outlineService.getMetrics(config.config_id);
      const bytesTotal = metrics.dataTransferred.bytes;
      const bytesInMB = bytesTotal / (1024 * 1024);
      
      statsMessage += `ID: ${config.config_id}
–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞
–¢—Ä–∞—Ñ–∏–∫: ${bytesInMB.toFixed(2)} MB\n\n`;
    }

    if (user?.is_admin) {
      const serverStatus = await monitoringService.getSystemStatus();
      statsMessage += `\n–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:
CPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%
RAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%
–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%
–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}
–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤`;
    }

    bot.sendMessage(chatId, statsMessage);
  } catch (error) {
    console.error('Error in /stats command:', error);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

bot.onText(/\/admin/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  try {
    const admin = await isAdmin(chatId);
    if (!admin) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    await bot.sendMessage(chatId, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminKeyboard);
  } catch (error) {
    console.error('Error in /admin command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
bot.onText(/\/addserver/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  const isUserAdmin = await isAdmin(chatId);
  if (!isUserAdmin) {
    return bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
  }

  const args = msg.text?.split(' ').slice(1);
  if (!args || args.length !== 4) {
    return bot.sendMessage(
      chatId,
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addserver <name> <location> <api_url> <cert_sha256>'
    );
  }

  const [name, location, apiUrl, certSha256] = args;

  try {
    const server = await outlineService.addServer(name, location, apiUrl, certSha256);
    await bot.sendMessage(
      chatId,
      `–°–µ—Ä–≤–µ—Ä "${server.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nID: ${server.id}\n–õ–æ–∫–∞—Ü–∏—è: ${server.location}`
    );
  } catch (error) {
    console.error('Error adding server:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

bot.onText(/\/removeserver/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  const isUserAdmin = await isAdmin(chatId);
  if (!isUserAdmin) {
    return bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
  }

  const args = msg.text?.split(' ').slice(1);
  if (!args || args.length !== 1) {
    return bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeserver <server_id>');
  }

  const serverId = parseInt(args[0]);
  if (isNaN(serverId)) {
    return bot.sendMessage(chatId, 'ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  }

  try {
    await outlineService.removeServer(serverId);
    await bot.sendMessage(chatId, `–°–µ—Ä–≤–µ—Ä —Å ID ${serverId} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
  } catch (error) {
    console.error('Error removing server:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

bot.onText(/\/listservers/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from?.username;
  
  if (!msg.from) {
    return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  const isUserAdmin = await isAdmin(chatId);
  if (!isUserAdmin) {
    return bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
  }

  const sendBotMessage = async (message: string, options?: TelegramBot.SendMessageOptions) => {
    console.log(`ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è ${username || 'Unknown'} (ID: ${chatId}):\n${message}`);
    return bot.sendMessage(chatId, message, options);
  };

  try {
    const servers = await outlineService.getAvailableServers();
    if (!servers.length) {
      return sendBotMessage('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
    }

    let message = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n';
    for (const server of servers) {
      message += `ID: ${server.id}\n` +
                `–ò–º—è: ${server.name}\n` +
                `–õ–æ–∫–∞—Ü–∏—è: ${server.location}\n` +
                `API URL: ${server.outline_api_url}\n\n`;
    }

    await sendBotMessage(message);
  } catch (error) {
    console.error('Error listing servers:', error);
    await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
  }
});
