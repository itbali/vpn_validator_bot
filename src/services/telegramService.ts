import TelegramBot from 'node-telegram-bot-api';
import { User, VPNConfig, VPNServer } from '../models';
import { outlineService } from './outlineService';
import { subscriptionService } from './subscriptionService';
import config from '../config';
import { MonitoringService } from './monitoringService';
import { formatBytes } from '../utils/formatters';
import { startHandler } from './onTextHandlers/startHandler';
import { helpHandler } from './onTextHandlers/helpHandler';
import { mentorHandler } from './onTextHandlers/mentorHandler';
import { regenerateKeyHandler } from './onTextHandlers/regenerateKeyHandler';
import { deleteHandler } from './onTextHandlers/deleteHandler';
import { faqHandler } from './onTextHandlers/faqHandler';
import { supportHandler } from './onTextHandlers/supportHandler';
import { statsHandler } from './onTextHandlers/statsHandler';
import { adminHandler } from './onTextHandlers/adminHandler';
import { addServerHandler } from './onTextHandlers/addServerHandler';
import { removeServerHandler } from './onTextHandlers/removeServerHandler';
import { listServersHandler } from './onTextHandlers/listServersHandler';

interface ServerDialogState {
  step: 'name' | 'location' | 'api_url' | 'cert_sha256';
  data: {
    name?: string;
    location?: string;
    api_url?: string;
    cert_sha256?: string;
  };
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const serverDialogs = new Map<number, ServerDialogState>();

export const bot = new TelegramBot(config.bot.token, { polling: true });
const monitoringService = new MonitoringService(bot);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
const setupBotCommands = async (): Promise<void> => {
  try {
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const baseCommands = [
      { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
      { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
      { command: '/vpn', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN' },
      { command: '/regenerate', description: '–û–±–Ω–æ–≤–∏—Ç—å VPN –∫–ª—é—á' },
      { command: '/delete', description: '–£–¥–∞–ª–∏—Ç—å VPN –∫–ª—é—á' },
      { command: '/stats', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' },
      { command: '/faq', description: '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã' },
      { command: '/support', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É' },
      { command: '/mentor', description: '–ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥' },
    ];

    // –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminCommands = [
      { command: '/admin', description: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' },
      { command: '/addserver', description: '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' },
      { command: '/listservers', description: '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤' },
      { command: '/removeserver', description: '–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' },
    ];

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.setMyCommands(baseCommands);

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥
    for (const adminId of config.telegram.adminIds) {
      try {
        await bot.setMyCommands([...baseCommands, ...adminCommands], { scope: { type: 'chat', chat_id: adminId } });
      } catch (err) {
        console.error(`Failed to set admin commands for admin ${adminId}:`, err);
      }
    }

    console.log('Bot menu commands have been successfully set up');
  } catch (error) {
    console.error('Error setting up bot commands:', error);
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUserCommands = async (chatId: number): Promise<void> => {
  try {
    const isUserAdmin = await isAdmin(chatId);

    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const baseCommands = [
      { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
      { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
      { command: '/vpn', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN' },
      { command: '/regenerate', description: '–û–±–Ω–æ–≤–∏—Ç—å VPN –∫–ª—é—á' },
      { command: '/delete', description: '–£–¥–∞–ª–∏—Ç—å VPN –∫–ª—é—á' },
      { command: '/stats', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' },
      { command: '/faq', description: '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã' },
      { command: '/support', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É' },
      { command: '/mentor', description: '–ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥' },
    ];

    // –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminCommands = [
      { command: '/admin', description: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' },
      { command: '/addserver', description: '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' },
      { command: '/listservers', description: '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤' },
      { command: '/removeserver', description: '–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' },
    ];

    const commands = isUserAdmin ? [...baseCommands, ...adminCommands] : baseCommands;
    await bot.setMyCommands(commands, { scope: { type: 'chat', chat_id: chatId } });
    console.log(`Commands updated for user ${chatId}, admin status: ${isUserAdmin}`);
  } catch (error) {
    console.error(`Error updating commands for user ${chatId}:`, error);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setupBotCommands();

const adminKeyboard: TelegramBot.SendMessageOptions = {
  reply_markup: {
    keyboard: [
      [{ text: 'üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏' }, { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏' }, { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { text: '‚äï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }, { text: 'üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤' }],
      [{ text: '‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥' }, { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }],
    ],
    resize_keyboard: true,
  },
};

const isAdmin = async (chatId: number): Promise<boolean> => {
  try {
    if (config.telegram.adminIds.includes(chatId)) {
      return true;
    }

    const user = await User.findOne({
      where: { telegram_id: String(chatId) },
    });

    if (!user) {
      return false;
    }

    if (!user.telegram_id || !user.username) {
      return false;
    }

    const channelId = config.telegram.channelId;
    const paidChannelId = config.telegram.paidChannelId;
    const chatMember = await bot.getChatMember(channelId, chatId);
    console.log({ chatMember });
    const paidChatMember = await bot.getChatMember(paidChannelId, chatId);
    console.log({ paidChatMember });
    const isAdminStatus =
      ['creator', 'administrator'].includes(chatMember.status) ||
      ['creator', 'administrator'].includes(paidChatMember.status);
    return isAdminStatus;
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  }
};

const mainKeyboard = async (chatId: number): Promise<TelegramBot.SendMessageOptions> => {
  const isUserAdmin = await isAdmin(chatId);
  const isMentorSubscriber = await subscriptionService.checkMentorSubscription(chatId);

  return {
    reply_markup: {
      keyboard: [
        [{ text: 'üé≠ VPN' }, ...(isMentorSubscriber ? [{ text: 'üë®‚Äçüíª –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥' }] : [])],
        [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' }],
        ...(isUserAdmin ? [[{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' }]] : []),
      ],
      resize_keyboard: true,
    },
  };
};

const vpnKeyboard: TelegramBot.SendMessageOptions = {
  reply_markup: {
    keyboard: [
      [{ text: 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á' }, { text: 'üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á' }],
      [{ text: '‚ùì FAQ' }],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }],
    ],
    resize_keyboard: true,
  },
};

const mentorKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìù –†–∞–∑–±–æ—Ä —Ä–µ–∑—é–º–µ', url: 'https://planerka.app/aleksei-diuzhev/razbor-rezyume' }],
      [{ text: 'üë®‚Äçüíª –í—Å—Ç—Ä–µ—á–∞ —Å —É—á–µ–Ω–∏–∫–æ–º', url: 'https://planerka.app/aleksei-diuzhev/vstrecha-s-uchenikom---1ch' }],
      [{ text: 'üéØ –ú–æ–∫ —Å–æ–±–µ—Å', url: 'https://planerka.app/aleksei-diuzhev/mokovoe-sobesedovanie' }],
    ],
  },
} as TelegramBot.SendMessageOptions;

const createServerSelectionKeyboard = async (): Promise<TelegramBot.SendMessageOptions> => {
  const servers = await outlineService.getAvailableServers();
  const keyboard = servers.map((server) => [{ text: `üåç ${server.name} (${server.location})` }]);
  keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }]);

  return {
    reply_markup: {
      keyboard,
      resize_keyboard: true,
    },
  };
};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await updateUserCommands(chatId);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  await startHandler({
    msg,
    isAdmin: await isAdmin(chatId),
    bot,
    User,
    config,
    keyboard: await mainKeyboard(chatId),
    subscriptionService,
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const isPrivate = msg.chat.type === 'private';
  const username = msg.from?.username;

  if (!text || !isPrivate) {
    return;
  }

  console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username || 'Unknown'} (ID: ${chatId}): ${text} \n`);

  const sendBotMessage = async (message: string, options?: TelegramBot.SendMessageOptions) => {
    console.log(`‚û°Ô∏è –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è ${username || 'Unknown'} (ID: ${chatId}):\n${message}`);
    return bot.sendMessage(chatId, message, options);
  };

  try {
    const user = await User.findOne({ where: { telegram_id: chatId.toString() } });
    const isUserAdmin = await isAdmin(chatId);

    if (isUserAdmin) {
      console.log(`üîë –ó–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ ${username || 'Unknown'} (ID: ${chatId})`);
    }

    if (!user) {
      await sendBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    const isPaidSubscribed = await subscriptionService.checkPaidSubscription(chatId);
    const isMentoringSubscribed = await subscriptionService.checkMentorSubscription(chatId);
    const isSubscribed = isPaidSubscribed || isMentoringSubscribed;

    if (!user.is_active) {
      await sendBotMessage('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return;
    }

    if (!isSubscribed) {
      await sendBotMessage('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã.');
      return;
    }

    switch (text) {
      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        try {
          const serverStatus = await monitoringService.getSystemStatus();
          let serverStatsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n`;
          serverStatsMessage += `CPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%\n`;
          serverStatsMessage += `RAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%\n`;
          serverStatsMessage += `–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%\n`;
          serverStatsMessage += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}\n`;
          serverStatsMessage += `–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤\n`;
          await sendBotMessage(serverStatsMessage);
        } catch (error) {
          console.error('Error getting server stats:', error);
          await sendBotMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        break;

      case 'üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        try {
          const servers = await outlineService.getAvailableServers();
          let keysMessage = `üîë –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π:\n\n`;

          if (servers.length === 0) {
            await sendBotMessage('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "‚äï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"');
            return;
          }

          for (const server of servers) {
            const keys = await outlineService.listKeys(server.id);
            keysMessage += `üìç –°–µ—Ä–≤–µ—Ä: ${server.name} (${server.location})\n\n`;

            if (keys.length === 0) {
              keysMessage += `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π\n\n`;
              continue;
            }

            for (const key of keys) {
              try {
                const metrics = await outlineService.getMetrics(key.id);
                keysMessage += `ID: ${key.id}\n`;
                keysMessage += `–ò–º—è: ${key.name}\n`;
                keysMessage += `–¢—Ä–∞—Ñ–∏–∫: ${formatBytes(metrics.dataTransferred.bytes)}\n\n`;
              } catch (error) {
                keysMessage += `ID: ${key.id}\n`;
                keysMessage += `–ò–º—è: ${key.name}\n`;
                keysMessage += `–¢—Ä–∞—Ñ–∏–∫: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n`;
                console.warn(`Error getting metrics for key ${key.id}:`, error);
              }
            }
            keysMessage += `\n`;
          }

          await sendBotMessage(keysMessage);
        } catch (error) {
          console.error('Error listing keys:', error);
          await sendBotMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π');
        }
        break;

      case '‚äï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        serverDialogs.set(chatId, {
          step: 'name',
          data: {},
        });
        await sendBotMessage(
          '–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.\n\n' +
            '–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Server 1")\n\n' +
            '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
          {
            reply_markup: {
              keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]],
              resize_keyboard: true,
            },
          },
        );
        break;

      case '‚ùå –û—Ç–º–µ–Ω–∞':
      case '–æ—Ç–º–µ–Ω–∞':
      case '–û—Ç–º–µ–Ω–∞':
        if (serverDialogs.has(chatId)) {
          serverDialogs.delete(chatId);
          await sendBotMessage('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', adminKeyboard);
        }
        break;

      case 'üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        try {
          const servers = await outlineService.getAvailableServers();
          if (!servers.length) {
            await sendBotMessage('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
            return;
          }

          let message = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n';
          for (const server of servers) {
            message +=
              `ID: ${server.id}\n` +
              `–ò–º—è: ${server.name}\n` +
              `–õ–æ–∫–∞—Ü–∏—è: ${server.location}\n` +
              `API URL: ${server.outline_api_url}\n\n`;
          }

          await sendBotMessage(message);
        } catch (error) {
          console.error('Error listing servers:', error);
          await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
        }
        break;

      case 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        await sendBotMessage('–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–µ–π...');
        try {
          const result = await outlineService.validateAllKeys();
          let message = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n`;
          message += `üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–ª—é—á–µ–π: ${result.totalChecked}\n`;
          message += `‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: ${result.deactivatedKeys.length}\n\n`;

          if (result.deactivatedKeys.length > 0) {
            message += `–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n`;
            for (const key of result.deactivatedKeys) {
              const user = await User.findOne({ where: { telegram_id: key.userId } });
              message += `- –ö–æ–Ω—Ñ–∏–≥: ${key.configId} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.username || key.userId})\n`;
            }
          }

          await sendBotMessage(message, adminKeyboard);
        } catch (error) {
          console.error('Error validating keys:', error);
          await sendBotMessage('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–π.', await mainKeyboard(chatId));
        }
        break;

      case 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        const users = await User.findAll();
        let usersMessage = `üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n`;
        for (const user of users) {
          const configs = await VPNConfig.findAll({
            where: { user_id: user.telegram_id, is_active: true },
          });
          usersMessage += `ID: ${user.telegram_id}\n`;
          usersMessage += `–ò–º—è: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
          usersMessage += `–°—Ç–∞—Ç—É—Å: ${user.is_active ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ê–¥–º–∏–Ω: ${user.is_admin ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${user.is_subscribed ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ${user.is_paid_subscribed ? '‚úÖ' : '‚ùå'}\n`;
          usersMessage += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: ${configs.length}\n\n`;
        }
        await sendBotMessage(usersMessage, adminKeyboard);
        break;

      case '‚öôÔ∏è –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }

        try {
          // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π
          const servers = await outlineService.getAvailableServers();
          const totalServers = servers.length;

          let totalKeys = 0;
          for (const server of servers) {
            const keys = await outlineService.listKeys(server.id);
            totalKeys += keys.length;
          }

          // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const totalUsers = await User.count();
          const activeUsers = await User.count({ where: { is_active: true } });

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
          let configMessage = `<b>‚öôÔ∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:</b>\n\n`;

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏ –∫–ª—é—á–∞—Ö
          configMessage += `<b>–°–µ—Ä–≤–µ—Ä—ã –∏ VPN:</b>\n`;
          configMessage += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${totalServers}\n`;
          configMessage += `‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: ${totalKeys}\n\n`;

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
          configMessage += `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n`;
          configMessage += `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
          configMessage += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}\n\n`;

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
          configMessage += `<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n`;
          configMessage += `‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${config.monitoring.checkInterval} —Å–µ–∫—É–Ω–¥\n`;
          configMessage += `‚Ä¢ –ü–æ—Ä–æ–≥ CPU: ${config.monitoring.thresholds.cpu}%\n`;
          configMessage += `‚Ä¢ –ü–æ—Ä–æ–≥ RAM: ${config.monitoring.thresholds.ram}%\n`;
          configMessage += `‚Ä¢ –ü–æ—Ä–æ–≥ –¥–∏—Å–∫–∞: ${config.monitoring.thresholds.disk}%\n\n`;

          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
          configMessage += `<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:</b>\n`;
          configMessage += `‚Ä¢ ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: ${config.telegram.channelId}\n`;
          configMessage += `‚Ä¢ ID –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: ${config.telegram.paidChannelId}\n`;
          configMessage += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${config.telegram.adminIds.length}\n`;

          await sendBotMessage(configMessage, {
            parse_mode: 'HTML' as TelegramBot.ParseMode,
            ...adminKeyboard,
          });
        } catch (error) {
          console.error('Error getting config info:', error);
          await sendBotMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.', adminKeyboard);
        }
        break;

      case '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
        if (!isUserAdmin) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return;
        }
        await sendBotMessage('–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminKeyboard);
        break;

      case 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á':
        const existingConfig = await VPNConfig.findOne({
          where: {
            user_id: chatId.toString(),
            is_active: true,
          },
        });

        if (existingConfig) {
          const server = await VPNServer.findByPk(existingConfig.server_id);
          let messageText = `<b>üîë –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∫–ª—é—á</b>\n\n`;
          if (server) {
            messageText += `–°–µ—Ä–≤–µ—Ä: ${server.name} (${server.location})\n`;
          }
          messageText += `<code>${existingConfig.config_data}</code>\n\n`;
          messageText += `<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.</b>`;
          await sendBotMessage(messageText, { parse_mode: 'HTML' as TelegramBot.ParseMode });
        } else {
          const keyboard = await createServerSelectionKeyboard();
          await sendBotMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', keyboard);
        }
        break;

      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        const configs = await VPNConfig.findAll({
          where: { user_id: chatId.toString(), is_active: true },
          include: [
            {
              model: VPNServer,
              required: false,
            },
          ],
        });

        if (!configs.length) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.');
          return;
        }

        let userStatsMessage = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:\n\n';

        for (const config of configs) {
          try {
            const metrics = await outlineService.getMetrics(config.config_id);
            const server = await VPNServer.findByPk(config.server_id);
            const serverName = server?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä';
            const location = server?.location || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            userStatsMessage +=
              `–°–µ—Ä–≤–µ—Ä: ${serverName} (${location})\n` +
              `ID: ${config.config_id}\n` +
              `–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n` +
              `–¢—Ä–∞—Ñ–∏–∫: ${formatBytes(metrics.dataTransferred.bytes)}\n\n`;
          } catch (error) {
            userStatsMessage += `ID: ${config.config_id}\n` + `–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n` + `–¢—Ä–∞—Ñ–∏–∫: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n`;
            console.warn(`Error getting metrics for key ${config.config_id}:`, error);
          }
        }

        if (user.is_admin) {
          try {
            const serverStatus = await monitoringService.getSystemStatus();
            userStatsMessage +=
              `\n–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n` +
              `CPU: ${serverStatus.metrics.cpu_usage.toFixed(1)}%\n` +
              `RAM: ${serverStatus.metrics.ram_usage.toFixed(1)}%\n` +
              `–î–∏—Å–∫: ${serverStatus.metrics.disk_usage.toFixed(1)}%\n` +
              `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${serverStatus.metrics.active_connections}\n` +
              `–ê–ø—Ç–∞–π–º: ${serverStatus.uptime} —á–∞—Å–æ–≤`;
          } catch (error) {
            userStatsMessage += '\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            console.warn('Error getting server status:', error);
          }
        }

        await sendBotMessage(userStatsMessage);
        break;

      case '‚ùì FAQ':
        const faqMessage = `
–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN?
- –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Outline Client (—Å—Å—ã–ª–∫—ã –Ω–∏–∂–µ)
- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
- –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline Client
- –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"

–°—Å—ã–ª–∫–∏:
<a href="https://itunes.apple.com/us/app/outline-app/id1356178125">MacOS</a>
<a href="https://itunes.apple.com/us/app/outline-app/id1356177741">iOS</a>
<a href="https://play.google.com/store/apps/details?id=org.outline.android.client">Android</a>
<a href="https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe">Windows</a>
<a href="https://support.google.com/outline/answer/15331527">Linux</a>
<a href="https://play.google.com/store/apps/details?id=org.outline.android.client">Chrome</a>


2. –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—É—Å"
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline

3. –ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /regenerate

4. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support

5. –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats
`;
        await sendBotMessage(faqMessage, { parse_mode: 'HTML' as TelegramBot.ParseMode });
        break;

      case 'üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á':
        const configToDelete = await VPNConfig.findOne({
          where: {
            user_id: chatId.toString(),
            is_active: true,
          },
        });

        if (!configToDelete) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
          return;
        }

        await outlineService.deactivateConfig(chatId.toString());
        await sendBotMessage('–í–∞—à VPN –∫–ª—é—á –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
        break;

      case 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á':
        const currentConfig = await VPNConfig.findOne({
          where: {
            user_id: chatId.toString(),
            is_active: true,
          },
        });

        if (!currentConfig) {
          await sendBotMessage('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
          return;
        }

        try {
          const newConfig = await outlineService.generateConfig(
            chatId.toString(),
            currentConfig.server_id,
            msg.from?.username || msg.from?.first_name,
          );
          // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
          await outlineService.deactivateConfig(chatId.toString());

          await sendBotMessage(
            `<b>üîë –í–∞—à VPN –∫–ª—é—á –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n` +
              `<b>‚ö°Ô∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n` +
              `<code>${newConfig.config_data}</code>`,
            { parse_mode: 'HTML' as TelegramBot.ParseMode },
          );
        } catch (error) {
          console.error('Error regenerating VPN key:', error);
          await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ VPN –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        if (!user) {
          await sendBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
          return;
        }
        await sendBotMessage('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', await mainKeyboard(chatId));
        break;

      case 'üé≠ VPN':
        await sendBotMessage('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', vpnKeyboard);
        break;

      case 'üë®‚Äçüíª –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥':
        const isMentorSubscriber = await subscriptionService.checkMentorSubscription(chatId);
        if (!isMentorSubscriber) {
          await sendBotMessage(
            `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥–µ, –ø–æ—Å–µ—Ç–∏—Ç–µ <a href="https://alex-diuzhev.ru/">—Å–∞–π—Ç –º–µ–Ω—Ç–æ—Ä–∞</a>`,
            {
              parse_mode: 'HTML',
            },
          );
          return;
        }
        await sendBotMessage(
          '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n' +
            'üìù <b>–†–∞–∑–±–æ—Ä —Ä–µ–∑—é–º–µ</b> - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ\n' +
            'üë®‚Äçüíª <b>–í—Å—Ç—Ä–µ—á–∞ —Å —É—á–µ–Ω–∏–∫–æ–º</b> - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n' +
            'üéØ <b>–ú–æ–∫ —Å–æ–±–µ—Å</b> - –ü—Ä–æ–±–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
          {
            parse_mode: 'HTML',
            ...mentorKeyboard,
          },
        );
        break;

      case '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        const mainMenuKeyboard = await mainKeyboard(chatId);
        await sendBotMessage('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenuKeyboard);
        break;

      case 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞':
        await sendBotMessage('–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', await mainKeyboard(chatId));
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
      default:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        const dialogState = serverDialogs.get(chatId);
        if (dialogState) {
          try {
            switch (dialogState.step) {
              case 'name':
                dialogState.data.name = text;
                dialogState.step = 'location';
                await sendBotMessage(
                  '–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Netherlands")\n\n' +
                    '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
                );
                break;

              case 'location':
                dialogState.data.location = text;
                dialogState.step = 'api_url';
                await sendBotMessage(
                  '–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ API URL —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "https://example.com:1234/abc")\n\n' +
                    '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
                );
                break;

              case 'api_url':
                dialogState.data.api_url = text;
                dialogState.step = 'cert_sha256';
                await sendBotMessage('–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ SHA256 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n' + '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"');
                break;

              case 'cert_sha256':
                dialogState.data.cert_sha256 = text;
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
                const { name, location, api_url, cert_sha256 } = dialogState.data;
                if (name && location && api_url && cert_sha256) {
                  const server = await outlineService.addServer(name, location, api_url, cert_sha256);
                  await sendBotMessage(
                    `‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
                      `üìç –ù–∞–∑–≤–∞–Ω–∏–µ: ${server.name}\n` +
                      `üåç –õ–æ–∫–∞—Ü–∏—è: ${server.location}\n` +
                      `üî¢ ID: ${server.id}`,
                    adminKeyboard,
                  );
                }
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
                serverDialogs.delete(chatId);
                break;
            }
          } catch (error) {
            console.error('Error in server dialog:', error);
            await sendBotMessage(
              '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "‚äï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"',
              adminKeyboard,
            );
            serverDialogs.delete(chatId);
          }
          break;
        }

        if (text.startsWith('üåç ')) {
          // Extract server name from button text by removing the emoji and location part
          const buttonText = text.slice(2).trim();
          // Find the last occurrence of " (" to properly handle server names that contain parentheses
          const lastParenIndex = buttonText.lastIndexOf(' (');
          const serverName = lastParenIndex !== -1 ? buttonText.substring(0, lastParenIndex).trim() : buttonText;

          const server = await VPNServer.findOne({
            where: {
              name: serverName,
              is_active: true,
            },
          });

          if (!server) {
            await sendBotMessage('–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
          }

          try {
            await outlineService.deactivateConfig(chatId.toString());

            const vpnConfig = await outlineService.generateConfig(
              chatId.toString(),
              server.id,
              msg.from?.username || msg.from?.first_name,
            );

            if (!vpnConfig || !vpnConfig.config_data) {
              await sendBotMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            } else {
              let messageText = `<b>üîë –í–∞—à –Ω–æ–≤—ã–π VPN –∫–ª—é—á</b>\n\n`;
              messageText += `–°–µ—Ä–≤–µ—Ä: ${server.name} (${server.location})\n`;
              messageText += `<code>${vpnConfig.config_data}</code>\n\n`;
              messageText += `<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.</b>`;
              await sendBotMessage(messageText, { parse_mode: 'HTML' as TelegramBot.ParseMode });
              await sendBotMessage('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', await mainKeyboard(chatId));
              return;
            }
          } catch (error) {
            console.error('Error generating VPN key:', error);
            await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VPN –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
        }
        break;
    }
  } catch (error) {
    console.error('Error in message handler:', error);
    await sendBotMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/help/, (msg: TelegramBot.Message) => helpHandler({ msg, bot }));

bot.onText(/\/mentor/, (msg: TelegramBot.Message) => mentorHandler({ msg, bot }));

bot.onText(/\/regenerate/, async (msg: TelegramBot.Message) =>
  regenerateKeyHandler({ msg, bot, subscriptionService, VPNConfig, outlineService }),
);

bot.onText(/\/delete/, async (msg: TelegramBot.Message) => deleteHandler({ msg, bot, outlineService }));

bot.onText(/\/faq/, (msg: TelegramBot.Message) => faqHandler({ msg, bot }));

bot.onText(/\/support/, (msg: TelegramBot.Message) => supportHandler({ msg, bot }));

bot.onText(/\/stats/, async (msg: TelegramBot.Message) =>
  statsHandler({ msg, bot, VPNConfig, outlineService, User, monitoringService }),
);

bot.onText(/\/admin/, async (msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const isUserAdmin = await isAdmin(chatId);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã
  if (isUserAdmin) {
    await updateUserCommands(chatId);
  }

  await adminHandler({ msg, bot, isAdmin: isUserAdmin, adminKeyboard });
});

bot.onText(/\/addserver/, async (msg) =>
  addServerHandler({ msg, bot, outlineService, isAdmin: await isAdmin(msg.chat.id) }),
);

bot.onText(/\/removeserver/, async (msg) =>
  removeServerHandler({ msg, bot, isAdmin: await isAdmin(msg.chat.id), outlineService }),
);

bot.onText(/\/listservers/, async (msg) =>
  listServersHandler({ msg, bot, outlineService, isAdmin: await isAdmin(msg.chat.id) }),
);

bot.onText(/\/vpn/, async (msg) => {
  const chatId = msg.chat.id;
  const user = await User.findOne({ where: { telegram_id: chatId.toString() } });

  if (!user) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  const isPaidSubscribed = await subscriptionService.checkPaidSubscription(chatId);
  const isMentoringSubscribed = await subscriptionService.checkMentorSubscription(chatId);
  const isSubscribed = isPaidSubscribed || isMentoringSubscribed;

  if (!user.is_active) {
    await bot.sendMessage(chatId, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    return;
  }

  if (!isSubscribed) {
    await bot.sendMessage(chatId, '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã.');
    return;
  }

  await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', vpnKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
bot.on('polling_error', async (error: any) => {
  console.error('Polling error:', error.message);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (
    error &&
    typeof error === 'object' &&
    'code' in error &&
    (error.code === 'EFATAL' || error.code === 'ETIMEDOUT' || error.code === 'EAI_AGAIN')
  ) {
    console.log('Connection error detected, attempting to reconnect in 10 seconds...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–ª–ª–∏–Ω–≥
    await bot.stopPolling();

    // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    setTimeout(async () => {
      try {
        await bot.startPolling();
        console.log('Successfully reconnected to Telegram API');
      } catch (error) {
        console.error('Failed to reconnect:', error instanceof Error ? error.message : 'Unknown error');
      }
    }, 10000);
  }
});
