import { Context } from 'telegraf';
import { outlineService } from '../services/outlineService';
import { VPNConfig } from '../models';
import { formatBytes } from '../utils/formatters';

export class UserVpnController {
  async getMyConfig(ctx: Context) {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const config = await VPNConfig.findOne({
        where: {
          user_id: userId,
          is_active: true
        }
      });

      if (!config) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        return;
      }

      const key = await outlineService.getKeyById(config.config_id);
      const metrics = await outlineService.getMetrics(config.config_id);
      const dataLimit = await outlineService.getDataLimit(config.config_id);

      let message = `üîë –í–∞—à VPN –∫–ª—é—á:\n\n`;
      message += `üì° –ê–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${key.accessUrl}\n`;
      message += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: ${formatBytes(metrics.dataTransferred.bytes)}\n`;
      
      if (dataLimit) {
        const percentUsed = (metrics.dataTransferred.bytes / dataLimit.bytes) * 100;
        message += `\nüìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: ${formatBytes(dataLimit.bytes)}\n`;
        message += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${percentUsed.toFixed(1)}%\n`;
      }

      await ctx.reply(message);
    } catch (error) {
      console.error('Error in getMyConfig:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
  }

  async getMyUsage(ctx: Context) {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const config = await VPNConfig.findOne({
        where: {
          user_id: userId,
          is_active: true
        }
      });

      if (!config) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        return;
      }

      const metrics = await outlineService.getMetrics(config.config_id);
      const dataLimit = await outlineService.getDataLimit(config.config_id);

      let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN:\n\n`;
      message += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: ${formatBytes(metrics.dataTransferred.bytes)}\n`;
      
      if (dataLimit) {
        const remaining = dataLimit.bytes - metrics.dataTransferred.bytes;
        const percentUsed = (metrics.dataTransferred.bytes / dataLimit.bytes) * 100;
        message += `\nüéØ –õ–∏–º–∏—Ç: ${formatBytes(dataLimit.bytes)}\n`;
        message += `‚ú® –û—Å—Ç–∞–ª–æ—Å—å: ${formatBytes(remaining)}\n`;
        message += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${percentUsed.toFixed(1)}%\n`;
      }

      await ctx.reply(message);
    } catch (error) {
      console.error('Error in getMyUsage:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }
}